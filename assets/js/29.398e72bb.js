(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{434:function(t,a,s){"use strict";s.r(a);var n=s(56),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"노드-시작하기"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#노드-시작하기"}},[t._v("#")]),t._v(" 노드 시작하기")]),t._v(" "),s("p",[t._v("Node.js 는 Chrome V8 Javascript 엔진으로 빌드된 Javascript 런타임이다.\n서버라는 말이 없는 이유는 노드가 서버만 실행할 수 있는 것이 아니기 때문이다.")]),t._v(" "),s("p",[t._v("노드는 자바스크립트 런타임이다. 런타임은 특정 언어로 만든 프로그램을 실행할 수 있는 환경을 뜻한다. 따라서 노드는 자바스크립트 프로그램을 컴퓨터에서 실행할 수 있다. 쉽게 말해서 노드는 자바스크립트 실행기이다.\n기존에는 자바스크립트 프로그램을 웹브라우저 위에서만 실행할 수 있었다. 브라우저는 자바스크립트 런타임을 내장하고 있으므로 자바스크립트 코드를 실행할 수 있기 때문이다.\n노드는 V8과 더불어 libuv라는 라이브러리를 사용한다.\nlibuv 라이브러리는 노드의 특성인 이벤트기반, 논블로킹 I/O모델을 구현하고 있다.\n이벤트 기반이란 이벤트가 발생할 때 미리 지정해둔 작업을 수행하는 방식을 의미한다. 이벤트로는 클릭이나 네트워크 요청등이 있을 수 있다.\n이벤트 기반 시스템에서는 특정 이벤트가 발생할 때 무엇을 할지 미리 등록해두어야한다. 이를 이벤트 리스너에 콜백함수를 등록한다고 표현한다. 이벤트가 발생하면 이벤트 리스너에 등록해둔 콜백 함수를 호출한다. 발생한 이벤트가 없거나 발생했던 이벤트를 다 처리하면, 노드는 다음 이벤트가 발생할 때까지 기다린다.이벤트 기반 모델에서는 이벤트 루프라는 개념이 등장한다. 여러 이벤트가 동시에 발생했을 때 어떤 순서로 콜백함수를 호출할지를 이벤트 루프가 판단한다. 컨텍스트는 함수가 호출되었을 때 생성되는 환경을 의미한다. 자바스크립트 코드는 실행시 기본적으로 전역 컨텍스트안에서 돌아간다. 함수는 실행되는 동안 호출 스택에 머물러 있다가 실행이 완료되면 호출 스택에서 지워진다.")]),t._v(" "),s("ul",[s("li",[t._v("이벤트 루프: 이벤트 발생시 호출할 콜백 함수들을 관리하고, 호출된 콜백함수의 실행 순서를 결정하는 역할을 담당한다. 노드가 종료될 때까지 이벤트 처리를 위한 작업을 반복하므로 루프라고 한다.")]),t._v(" "),s("li",[t._v("백그라운드: setTimeout 같은 타이머나 이벤트 리스너들이 대기하는 곳이다. 자바스크립트가 아닌 다른 언어로 작성된 프로그램이라고 봐도 된다. 여러 작업이 동시에 실행될 수 있다.")]),t._v(" "),s("li",[t._v("태스크 큐: 이벤트 발생후, 백그라운드에서는 태스크큐로 타이머나 이벤트 리스너의 콜백함수를 보낸다. 정해진 순서대로 콜백들이 줄을 서있으므로 콜백 큐라고도 부른다. 콜백들은 보통 완료된 순서대로 줄을 서있지만 특정한 경우에는 순서가 바뀌기도 한다. 이벤트 루프는 호출스택이 비어있으면 태스크큐에서 함수를 하나씩 가져와 호출스택에 넣고 실행한다.")])]),t._v(" "),s("h3",{attrs:{id:"논-블로킹-i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#논-블로킹-i-o"}},[t._v("#")]),t._v(" 논 블로킹 I/O")]),t._v(" "),s("p",[t._v("이벤트 루프를 잘 활용하면 오래 걸리는 작업을 효율적으로 처리할 수 있다. 작업에는 두가지 종류가 있는데, 동시에 실행될 수 있는 작업과 동시에 실행될 수 없는 작업이다. 기본적으로 작성한 자바스크립트 코드는 동시에 실행될수 없다. 하지만 자바스크립트상에서 돌아가는 것이 아닌 I/O 작업 같은 것은 동시에 처리될 수 있다. I/O는 입력 출력을 의미한다.\n파일 시스템에 접근이나 네트워크를 통한 요청같은 작업이 I/O의 일종이다. 이러한 작업을 할 때 노드는 논블로킹 방식으로 처리하는 방법을 제공한다. 논블로킹이란 이전 작업이 완료될 때까지 대기하지 않고 다음 작업을 수행함을 뜻한다. 반대로 블로킹은 이전 작업이 끝나야만 다음 작업을 수행하는 것을 의미한다. 노드는 I/O작업을 백그라운드로 넘겨 동시에 처리하곤 한다. 따라서 동시에 처리 될 수 있는 작업들은 최대한 묶어서 백그라운드로 넘겨야 시간을 절약할 수 있다.")]),t._v(" "),s("h3",{attrs:{id:"싱글-스레드"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#싱글-스레드"}},[t._v("#")]),t._v(" 싱글 스레드")]),t._v(" "),s("p",[t._v("프로세스는 운영체제에서 할당하는 작업의 단위이다. 노드나 웹브라우저같은 프로그램은 개별적인 프로세스이다. 프로세스간에는 메모리등의 자원을 공유하지 않는다.\n스레드는 프로세스 내에서 실행되는 흐름의 단위이다. 프로세스는 스레드를 여러개 생성해 여러 작업을 동시에 처리할 수 있다. 스레드들은 부모 프로세스의 자원을 공유한다. 같은 주소의 메모리에 접근 가능하므로 데이터를 공유할 수 있다.\n노드를 실행하면 프로세스 하나가 생성된다. 그리고 그 프로세스에서 스레드들을 생성하는데, 이때 내부적으로 스레드를 여러개 생성한다. 그중에서 우리가 제어할 수 있는 스레드는 하나뿐이다. 그래서 흔히 노드가 싱글스레드가로 여겨지는 것이다. 스레드를 작업을 처리하는 일손으로 표현하기도 하는데, 하나의 스레드만 직접조작할 수 있으므로 일손이 하나인 셈이다. 요청이 많이 들어오면 한번에 하나씩 요청을 처리한다. 블로킹이 심하게 일어나는 작업을 처리하지만 않는다면 스레드 하나로도 충분하다.블로킹이 발생할 것 같은 경우에는 논블로킹 방법으로 대기 시간을 최대한 줄인다.\n노드가 싱글스레드로 동작하지 않는 두가지 경우가 있다. 하나는 스레드풀이고, 다른하나는 워커 스레드이다. 스레드 풀은 노드가 특정 동작을 수행할때 스스로 멀티스레드를 사용한다. 대표적인 예로 암호화 파일입출력 압축등이있다. 워커스레드는 노드 12버전에서 안정화된 기능으로 이제 노드에서 멀티스레드를 사용할 수 있게 되었다. CPU작업이 많은 경우 워커 스레드를 사용하면 된다.\nI/O작업을 처리할 때는 멀티스레딩보다 멀티 프로세싱이 더 효율적이므로 노드는 멀티 프로세싱을 많이 사용한다.")])])}),[],!1,null,null,null);a.default=r.exports}}]);