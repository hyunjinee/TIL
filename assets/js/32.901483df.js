(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{438:function(t,a,_){"use strict";_.r(a);var s=_(56),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"모놀리식-아키텍처"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#모놀리식-아키텍처"}},[t._v("#")]),t._v(" 모놀리식 아키텍처")]),t._v(" "),_("p",[t._v("커다란 모놀리식 아키텍처를 단독으로 실행 가능한 다수의 모듈로 분해한 아키텍처를 마이크로 아키텍처라고한다.")]),t._v(" "),_("p",[t._v("하나의 애플리케이션 안에 모든 컴포넌트를 포함하는 구조이다. 구조가 단순해 개발과 배포가 간편하다는 특징이다.")]),t._v(" "),_("h2",{attrs:{id:"_1-2-모놀리식-아키텍처의-한계"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-모놀리식-아키텍처의-한계"}},[t._v("#")]),t._v(" 1.2 모놀리식 아키텍처의 한계")]),t._v(" "),_("p",[t._v("분산처리가 비효율적이다. 모놀리식 아키텍처는 모든 기능을 프로세스 하나또는 코드 베이스로 개발하기 때문에 별도로 분산처리를 할수 없다. 항상 전체를 같이 분산해야한다.")]),t._v(" "),_("p",[t._v("코드를 관리하기 어렵다. 코드 구조가 하나이기 때문에 새로운 코드를 추가하려면 전체 코드를 이해해야하고 코드를 추가할 수록 구조가 복잡해진다.\n새로운 기술을 적용하기 어렵다. 특정 기능에 새로운 기술을 적용하고 싶어도 기능별로 코드가 독립적이지 않아서 적용하기 쉽지 않다.")]),t._v(" "),_("h2",{attrs:{id:"_1-3-분산-아키텍처의-필요성"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-분산-아키텍처의-필요성"}},[t._v("#")]),t._v(" 1.3 분산 아키텍처의 필요성")]),t._v(" "),_("p",[t._v("코드 수저엥 부담이 없다. 새로운 기능을 추가할 때 기존의 코드에 영향을 주지않아야한다.")]),t._v(" "),_("p",[t._v("필요한 기능만 분산처리할수 있어야하고 다른기능에 결함이 발생해도 영향을 받지 않아야 한다. 기능별로 최적화된 기술을 적용할수 있어야하고, 각기 다른 기술로 작성한 코드가 유기적으로 동작해야한다.")]),t._v(" "),_("h1",{attrs:{id:"_2장-마이크로서비스-아키텍처"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2장-마이크로서비스-아키텍처"}},[t._v("#")]),t._v(" 2장 마이크로서비스 아키텍처")]),t._v(" "),_("h2",{attrs:{id:"_2-1-마이크로서비스란"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-마이크로서비스란"}},[t._v("#")]),t._v(" 2.1 마이크로서비스란")]),t._v(" "),_("p",[t._v("커다란 모놀리식 아키텍처를 단독으로 실행 가능한 다수의 모듈로 분해한 아키텍처를 마이크로서비스아키텍처라고한다.\n각각의 마이크로서비스는 독립적인 프로세스 형태로 각기 배포할 수 있어야하고  개별적으로도 개발할 수 있어야한다. 마이크로서비스는 상호 독립적인 구조이기 때문에 프로그램언어와 프레임워크가 같을 필요는 업으며 서로 독립적인 데이터 저장소와 네트워크 통신 기능을 가질수 있다.")]),t._v(" "),_("p",[t._v("마이크로 서비스는 하나는 독립적인 프로세스 하나를 의미한다.개발과 배포에 상호 독립적이다.\n기술 독립성을 가진다. 독립적인 데이터 저장소를 가질수 있다. 각 마이크로 서비스는 각자 가진 네트워크 기능으로 통신할 수 있다. 모놀리식 아키텍처의 문제 대부분은 모든 기능을 하나의 프로세스로 개발하는데 있어서 발생한다. 관리하기 적당한 작은 단위로 기능을 분리하면 앞에서 언급한 문제점인 비효율적인 분산처리와 로드의 복잡성을 해결할수 있는 기능별로 최적화된 언어 및 프레임워크도 사용가능하다.")]),t._v(" "),_("h2",{attrs:{id:"_2-2-단점"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-단점"}},[t._v("#")]),t._v(" 2.2 단점")]),t._v(" "),_("p",[t._v("배포와 실행이 복잡해짐\n분산 시스템을 구현하기 어렵다. 마이크로서비스에는 독립적인 프로세스들을 유기적으로 동작할 수 있게하는 분산 네트워크 시스템이 필요하다.")]),t._v(" "),_("h2",{attrs:{id:"_2-3-마이크로서비스와-node-js"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-마이크로서비스와-node-js"}},[t._v("#")]),t._v(" 2.3 마이크로서비스와 Node.js")]),t._v(" "),_("p",[t._v("코드 구조를 작고 가볍게 하는데 어떤 요소가 가장 중요할까?\n대부분의 서비스는 정보를 조회하는데 데이터베이스, 파일등과의 I/O가 필수적이다. 이때 I/O가 동기방식이라면 응답이 올 때 까지 다른 요청을 처리하지 못하기 때문에 성능이 좋지 않다. 보통 이러한 문제는 메시지-큐를 이용해 해결한다. 노드는 싱글스레드를 기반으로 코딩하기 때문에 스레드 동기화와 교착상태등을 고려할 필요가 없다. 노드에는 메시지 큐기능이 자체적으로 들어있고, 경령화된 고성능 서버 개발에 최적화된 프레임 워크이다.")])])}),[],!1,null,null,null);a.default=r.exports}}]);