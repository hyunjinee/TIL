(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{419:function(t,e,r){"use strict";r.r(e);var v=r(56),o=Object(v.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"kmp-알고리즘"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kmp-알고리즘"}},[t._v("#")]),t._v(" KMP 알고리즘")]),t._v(" "),r("p",[t._v("문자열 감색에는 대표적으로 4자기 알고리즘이 있습니다.")]),t._v(" "),r("ul",[r("li",[t._v("Naive")]),t._v(" "),r("li",[t._v("Robin Karp")]),t._v(" "),r("li",[t._v("KMP")]),t._v(" "),r("li",[t._v("Boyer Moore")])]),t._v(" "),r("p",[t._v("Naive 방식은 처음부터 끝까지 패턴의 위치를 하나씩 옮겨 가며 패턴을 비교해 찾는 방법입니다.\n길이가 N인 문자열에 대해 길이가 M인 패턴을 찾는다면 M개의 문자열을 N번씩 탐색해 주어야하므로 O(MN)의 시간 복잡도가 나오게 됩니다. 이는 매우 비.효율적입니다.")]),t._v(" "),r("p",[t._v("KMP 알고리즘은ㅑ 이러한 문자열 검색을 O(N+M)으로 단축시킬 수 있습니다.")]),t._v(" "),r("p",[t._v("실패함수는 pi배열 이라고도 하고 the longest proper prefix of pattern 이라고 해서 lps 배열 이라고도 합니다.")]),t._v(" "),r("p",[t._v("참고\nhttps://devyuseon.github.io/algorithm/kmp-algorithm/")])])}),[],!1,null,null,null);e.default=o.exports}}]);