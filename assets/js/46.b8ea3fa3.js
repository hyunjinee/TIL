(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{452:function(t,s,a){"use strict";a.r(s);var n=a(56),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_2-1-변수-타입-선언"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-변수-타입-선언"}},[t._v("#")]),t._v(" 2.1 변수 타입 선언")]),t._v(" "),a("p",[t._v("강제적인 타입 선언이 귀찮게 느껴질짇 모르겠지만 장기적인 관점에서 볼 때 생산성이 눈에 띌 정도로 향상된다는 사실을 알 수 있다.")]),t._v(" "),a("p",[t._v("타입스크립트에는 다음과 같은 타입 표기가 있습니다. 대부분 타입은 자기 기술적인 이름을 가지고 있으며 주요 타입은 아래와 같습니다.")]),t._v(" "),a("ul",[a("li",[t._v("string")]),t._v(" "),a("li",[t._v("boolean")]),t._v(" "),a("li",[t._v("number")]),t._v(" "),a("li",[t._v("symbol - Symbol 생성자를 호출해 생성된 고유값")]),t._v(" "),a("li",[t._v("any : 모든 타입을 허용하는 타입 , 코드를 쓰는 동안 정해지지 않은 변수를 지정할 수 있음")]),t._v(" "),a("li",[t._v("unknown: any와 비슷하나 먼저 타입을 지정하거나 좁히지 않으면 조작이 허용되지 않음")]),t._v(" "),a("li",[t._v("never: 도달할 수 없는 코드를 나타냄")]),t._v(" "),a("li",[t._v("void: 값이 없음")])]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ord "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"orderID"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myOrder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ord"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("타입스크립트 역시 자바스크립트에서 값이 없음을 나태내는 null 값과 undefined 타입을 가집니다. 값이 할당되지 않은 변수는 초기값으로 undefined를 가지며 그 자체로 undefined 타입입니다. 값을 반환하지 않는 함수 역시 undefined 를 반환합니다. 반면 null은 명시적으로 값이 비어있음을 나타내며 객체입니다.")]),t._v(" "),a("p",[t._v("any 타입은 타입체크의 장점을 잃고 코드 가독성도 떨어지기 때문에 되도록이면 사용하지 않는 것이 좋다.")]),t._v(" "),a("p",[t._v("never 타입은 절대 반환을 하지 않는 함수에 사용합니다. 절대로 실행이 종료되지 않는 함수나 오류를 발생시키기 위해서만 존재하는 함수를 예로 들 수 있습니다.")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("logger")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"서버가 실행 중 입니다."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("위 코드에서 logger의 타입은 never입니다.")]),t._v(" "),a("p",[t._v("런타입 중에 함수 본문에 리턴문이 없는 경우에는 undefined 를 반환합니다. 그러나 void타입을 사용하면 이와 같은 실수를 방지 할 수 있습니다.")]),t._v(" "),a("p",[t._v("타입스크립트 컴파일러가 유추 가능한 곳에 명시적으로 타입을 추가하는 것을 피해야한다.")]),t._v(" "),a("p",[t._v("초기값 없이 변수를 선언하면 타입스크립트 컴파일러는 any 타입으로 유추합니다. 이처럼 컴파일러가 변수 타입을 유추하는 것을 타입 확장 type widening 이라고 부릅니다.")]),t._v(" "),a("p",[t._v("--strictNullCheck 옵션은 undefined 값을 잡는데 도움이 됩니다.")]),t._v(" "),a("p",[t._v("타입스크립트 함수와 함수 표현식은 자바스크립트와 유사하지만 파라미터 타입과 반환 값을 명시적으로 선언합니다. 먼저 타입이 없는 자바스크립트 함수를 작성해보겠습니다.")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("calcTax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" income"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dependents"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NY"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" income "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.06")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" dependants "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("만약 우리가 타입을 틀리게 추축해서 dependents 값에 문자열을 준다면?")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tax "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("calcTax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NJ"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),a("p",[t._v("함수가 호출되기 전까지 위 코드가 문제 있음을 알 수 없다. 이제 타입을 추가한다면 파라미터를 다르게 전달할 일은 없을 것이다.")]),t._v(" "),a("p",[t._v("리턴문이 없으면 undefined 를 반환한다.")]),t._v(" "),a("h3",{attrs:{id:"_2-1-3-유니온-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-유니온-타입"}},[t._v("#")]),t._v(" 2.1.3 유니온 타입")]),t._v(" "),a("p",[t._v("유니온 타입은 OR연산자 처럼 변수에 지정할 수 있는 탕비이 여러개일 경우 사용합니다.")]),t._v(" "),a("blockquote",[a("p",[t._v("타입 가드")])]),t._v(" "),a("p",[t._v("타입가드 in은 타입 범위를 축소하는 표현입니다. 예를 들어 유니온 타입인자를 가진 함수는 호출하는 동안 실제 값을 체크할 수 있을 것입니다. 아래 코드를 보면 서로 다른 프로퍼티를 가진 두 인터페이스가 있습니다. foo() 함수는 a또는 b프로퍼티를 가집니다. 타입가드 in은 foo()함수 본문에서 반환전 특정 프로퍼티가 파라미터 객체에 포함되어 있는지를 확인합니다.")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("x라는 객체에 a라는 키가 있으면..")]),t._v(" "),a("p",[t._v("요약")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("개발자들에게 변수 타입 선언을 강제하면 해야할 일이 더 많아져도 장기적으로 개발 생산성이 눈에 띄게 높아질 것입니다.")])]),t._v(" "),a("li",[a("p",[t._v("타입스크립트는 많은 타입을 지원하지만 커스텀 타입도 필요한 만큼 선언할 수 있습니다.")])]),t._v(" "),a("li",[a("p",[t._v("이미 선언된 타입들로 유니온을 선언해 새로운 타입을 만들 수 있습니다.")])]),t._v(" "),a("li",[a("p",[t._v("type, interface, class 연산자를 사용해 새로운 타입을 선언할 수 있습니다.")])]),t._v(" "),a("li",[a("p",[t._v("타입 스크립트는 자바나 C# 등 명목적 타입 시스템을 사용하는 언어와 다르게 구조적 타입시스템을 사용합니다.")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);